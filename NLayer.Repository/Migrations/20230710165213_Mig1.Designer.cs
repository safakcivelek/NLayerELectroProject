// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NLayer.Repository.EntityFramework.Contexts;

#nullable disable

namespace NLayer.Repository.Migrations
{
    [DbContext(typeof(ElectroDbContext))]
    [Migration("20230710165213_Mig1")]
    partial class Mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NLayer.Core.Entities.Concert.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(1871),
                            Description = "Laptop Modelleri",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(1872),
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(1876),
                            Description = "Kamera Modelleri",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(1877),
                            Name = "Kamera"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(1879),
                            Description = "Kulaklık Modelleri",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(1880),
                            Name = "Kulaklık"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(1882),
                            Description = "Monitor Modelleri",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(1883),
                            Name = "Monitor"
                        });
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2879),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2880),
                            ProductId = 1,
                            Text = "Yorum 1. Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source."
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2883),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2884),
                            ProductId = 2,
                            Text = "Yorum 2. Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source."
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2886),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2887),
                            ProductId = 3,
                            Text = "Yorum 3. Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source."
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2889),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2889),
                            ProductId = 4,
                            Text = "Yorum 4. Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source."
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2892),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2892),
                            ProductId = 5,
                            Text = "Yorum 5. Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source."
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2895),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2895),
                            ProductId = 6,
                            Text = "Yorum 6. Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source."
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2898),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2898),
                            ProductId = 7,
                            Text = "Yorum 7. Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source."
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2900),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2901),
                            ProductId = 8,
                            Text = "Yorum 8. Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source."
                        });
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AddressTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Kanarya mahallesi. Şahin caddesi. Kırlangıç sokak. No/11. Kat/2. Küçükçekmece/İstanbul",
                            AddressTitle = "Ev",
                            City = "İstanbul",
                            Country = "Türkiye",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2518),
                            Description = "1 No'lu Sipariş Açıklaması.",
                            District = "Küçükçekmece",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2518),
                            OrderNumber = "No1111",
                            PostalCode = "34660",
                            Status = 0,
                            Total = 350m,
                            UserId = 3,
                            UserName = "customeruser"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Kanarya mahallesi. Şahin caddesi. Kırlangıç sokak. No/11. Kat/2.",
                            AddressTitle = "Ev",
                            City = "Brüksel",
                            Country = "Belçika",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2523),
                            Description = "2 No'lu Sipariş Açıklaması.",
                            District = "Üsküdar",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2524),
                            OrderNumber = "No2222",
                            PostalCode = "34660",
                            Status = 0,
                            Total = 950m,
                            UserId = 3,
                            UserName = "customeruser"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kanarya mahallesi. Şahin caddesi. Kırlangıç sokak. No/11. Kat/2. Küçükçekmece/İstanbul",
                            AddressTitle = "İş",
                            City = "Tokyo",
                            Country = "Japonya",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2527),
                            Description = "3 No'lu Sipariş Açıklaması.",
                            District = "Kadiköy",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2528),
                            OrderNumber = "No3333",
                            PostalCode = "34660",
                            Status = 0,
                            Total = 1700m,
                            UserId = 3,
                            UserName = "customeruser"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Kanarya mahallesi. Şahin caddesi. Kırlangıç sokak. No/11. Kat/2. Küçükçekmece/İstanbul",
                            AddressTitle = "İş",
                            City = "Paris",
                            Country = "Fransa",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2531),
                            Description = "4 No'lu Sipariş Açıklaması.",
                            District = "Beylikdüzü",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2532),
                            OrderNumber = "No4444",
                            PostalCode = "34660",
                            Status = 0,
                            Total = 2630m,
                            UserId = 3,
                            UserName = "customeruser"
                        });
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.OrderDetail", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            OrderId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2679),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2680),
                            Price = 10m,
                            Quantity = (short)11,
                            SubTotal = 110m
                        },
                        new
                        {
                            ProductId = 2,
                            OrderId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2696),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2697),
                            Price = 20m,
                            Quantity = (short)12,
                            SubTotal = 240m
                        },
                        new
                        {
                            ProductId = 3,
                            OrderId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2700),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2700),
                            Price = 30m,
                            Quantity = (short)13,
                            SubTotal = 390m
                        },
                        new
                        {
                            ProductId = 4,
                            OrderId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2703),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2704),
                            Price = 40m,
                            Quantity = (short)14,
                            SubTotal = 560m
                        },
                        new
                        {
                            ProductId = 5,
                            OrderId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2707),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2708),
                            Price = 50m,
                            Quantity = (short)15,
                            SubTotal = 750m
                        },
                        new
                        {
                            ProductId = 6,
                            OrderId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2711),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2711),
                            Price = 60m,
                            Quantity = (short)16,
                            SubTotal = 960m
                        },
                        new
                        {
                            ProductId = 7,
                            OrderId = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2714),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2715),
                            Price = 70m,
                            Quantity = (short)17,
                            SubTotal = 1190m
                        },
                        new
                        {
                            ProductId = 8,
                            OrderId = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2717),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2718),
                            Price = 80m,
                            Quantity = (short)18,
                            SubTotal = 1440m
                        });
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiscounted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StarGivenUserCount")
                        .HasColumnType("int");

                    b.Property<int>("StarPoint")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CommentCount = 0,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2287),
                            Description = "2 Yıl Garantili, Taşınabilir Bilgisayar",
                            Discount = 0.0,
                            ImageUrl = "productImages/defaultProduct1.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2287),
                            Name = "Casper Nirvana Intel Core i7",
                            Price = 10m,
                            StarGivenUserCount = 10,
                            StarPoint = 5,
                            Stock = 10
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CommentCount = 0,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2293),
                            Description = "2 Yıl Garantili, Taşınabilir Kamera",
                            Discount = 0.0,
                            ImageUrl = "productImages/defaultProduct3.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2294),
                            Name = "Canon XA11 FUll HD",
                            Price = 20m,
                            StarGivenUserCount = 10,
                            StarPoint = 5,
                            Stock = 20
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CommentCount = 0,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2304),
                            Description = "2 Yıl Garantili, Taşınabilir Kulaklık",
                            Discount = 0.0,
                            ImageUrl = "productImages/defaultProduct4.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2305),
                            Name = "Sony WH-CH510W Kablosuz",
                            Price = 30m,
                            StarGivenUserCount = 10,
                            StarPoint = 5,
                            Stock = 30
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CommentCount = 0,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2321),
                            Description = "2 Yıl Garantili, Taşınabilir Monitor",
                            Discount = 0.0,
                            ImageUrl = "productImages/defaultProduct5.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2322),
                            Name = "ASUS Rog 24.5 140Hz ",
                            Price = 40m,
                            StarGivenUserCount = 10,
                            StarPoint = 5,
                            Stock = 40
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CommentCount = 0,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2325),
                            Description = "2 Yıl Garantili, Taşınabilir Bilgisayar",
                            Discount = 0.0,
                            ImageUrl = "productImages/defaultProduct2.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2326),
                            Name = "Hp Victus Intel Core i5",
                            Price = 50m,
                            StarGivenUserCount = 10,
                            StarPoint = 5,
                            Stock = 50
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CommentCount = 0,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2329),
                            Description = "2 Yıl Garantili, Taşınabilir Kamera",
                            Discount = 0.0,
                            ImageUrl = "productImages/defaultProduct3.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2329),
                            Name = "Haikon DA33 FUll HD",
                            Price = 60m,
                            StarGivenUserCount = 10,
                            StarPoint = 5,
                            Stock = 60
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CommentCount = 0,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2333),
                            Description = "2 Yıl Garantili, Taşınabilir Kulaklık",
                            Discount = 0.0,
                            ImageUrl = "productImages/defaultProduct4.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2333),
                            Name = "SAMSUNG O-IA500B Kulaklık",
                            Price = 70m,
                            StarGivenUserCount = 10,
                            StarPoint = 5,
                            Stock = 70
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            CommentCount = 0,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2337),
                            Description = "2 Yıl Garantili, Taşınabilir Monitor",
                            Discount = 0.0,
                            ImageUrl = "productImages/defaultProduct5.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 10, 19, 52, 13, 161, DateTimeKind.Local).AddTicks(2337),
                            Name = "MSI Optix G241VC 23.6 75Hz",
                            Price = 80m,
                            StarGivenUserCount = 10,
                            StarPoint = 5,
                            Stock = 80
                        });
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "45acdf50-761a-443c-859f-709f3526d906",
                            Name = "FullAccess",
                            NormalizedName = "FULLACCESS"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "19c4b3f2-c1b5-4b88-a5a8-b837abe38496",
                            Name = "ReadOnly",
                            NormalizedName = "READONLY"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "d553a401-7def-4a39-94e8-60ffecdb4eb6",
                            Name = "LoggedCustomer",
                            NormalizedName = "LOGGEDCUSTOMER"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "b6d1d5ad-607c-44fc-9b95-9729d8c0dfe5",
                            Name = "NotLoggedCustomer",
                            NormalizedName = "NOTLOGGEDCUSTOMER"
                        });
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FacebookLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("GitHubLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("InstagramLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LinkedInLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WebsiteLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("YoutubeLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Admin User of Electro",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b47fca18-dc1e-445a-8802-241bec77c50c",
                            Email = "adminuser@gmail.com",
                            EmailConfirmed = true,
                            FacebookLink = "https://facebook.com/adminuser",
                            FirstName = "Admin",
                            GitHubLink = "https://github.com/adminuser",
                            InstagramLink = "https://instagram.com/adminuser",
                            LastName = "User",
                            LinkedInLink = "https://linkedin.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINUSER@GMAIL.COM",
                            NormalizedUserName = "ADMINUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEEJWLbHRCgYloUCtFSuidA1tvJ9A9S9kd5XH9t8t6M4G4yl2rHBUz4gxOIi54trEkw==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "userImages/defaultUser.png",
                            SecurityStamp = "eb45eed7-5f09-4c37-a8ef-ce931145dc5b",
                            TwitterLink = "https://twitter.com/adminuser",
                            TwoFactorEnabled = false,
                            UserName = "adminuser",
                            WebsiteLink = "https://electro.com/",
                            YoutubeLink = "https://youtube.com/adminuser"
                        },
                        new
                        {
                            Id = 2,
                            About = "Editor User of Electro",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3354f848-ee0e-4c6b-b904-f948efab94ce",
                            Email = "editoruser@gmail.com",
                            EmailConfirmed = true,
                            FacebookLink = "https://facebook.com/editoruser",
                            FirstName = "Editor",
                            GitHubLink = "https://github.com/editoruser",
                            InstagramLink = "https://instagram.com/editoruser",
                            LastName = "User",
                            LinkedInLink = "https://linkedin.com/editoruser",
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITORUSER@GMAIL.COM",
                            NormalizedUserName = "EDITORUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEP/YpLcvnQS5VlPdhTSlYDwCd8QKSsZ56dZYpIYCiRbIXvdy1Nt71fbfnmEhw5Go7w==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "userImages/defaultUser.png",
                            SecurityStamp = "60ef0bb4-f5b6-44f3-8282-73d50e1074cd",
                            TwitterLink = "https://twitter.com/editoruser",
                            TwoFactorEnabled = false,
                            UserName = "editoruser",
                            WebsiteLink = "https://electro.com/",
                            YoutubeLink = "https://youtube.com/editoruser"
                        },
                        new
                        {
                            Id = 3,
                            About = "Customer User of Electro",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "819775fc-b3ac-4cae-9958-08c37db86ffe",
                            Email = "customeruser@gmail.com",
                            EmailConfirmed = true,
                            FacebookLink = "https://facebook.com/customeruser",
                            FirstName = "Customer",
                            GitHubLink = "https://github.com/customeruser",
                            InstagramLink = "https://instagram.com/customeruser",
                            LastName = "User",
                            LinkedInLink = "https://linkedin.com/customeruser",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMERUSER@GMAIL.COM",
                            NormalizedUserName = "CUSTOMERUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEPvSnWUYISuvz60G/SEl9tJ/0WSZIeSB9OP22RQitPIwAEr9YQ1PKft1KORRis0Acg==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "userImages/defaultUser.png",
                            SecurityStamp = "9c1adcf8-85a4-4c0f-b12e-fc2b390afede",
                            TwitterLink = "https://twitter.com/customeruser",
                            TwoFactorEnabled = false,
                            UserName = "customeruser",
                            WebsiteLink = "https://electro.com/",
                            YoutubeLink = "https://youtube.com/customeruser"
                        });
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NLayer.Core.OtherEntities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Callsite")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Exception")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Logged")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logger")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("Id");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.Comment", b =>
                {
                    b.HasOne("NLayer.Core.Entities.Concert.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NLayer.Core.Entities.Concert.User", null)
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.Order", b =>
                {
                    b.HasOne("NLayer.Core.Entities.Concert.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.OrderDetail", b =>
                {
                    b.HasOne("NLayer.Core.Entities.Concert.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NLayer.Core.Entities.Concert.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.Product", b =>
                {
                    b.HasOne("NLayer.Core.Entities.Concert.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.RoleClaim", b =>
                {
                    b.HasOne("NLayer.Core.Entities.Concert.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.UserClaim", b =>
                {
                    b.HasOne("NLayer.Core.Entities.Concert.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.UserLogin", b =>
                {
                    b.HasOne("NLayer.Core.Entities.Concert.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.UserRole", b =>
                {
                    b.HasOne("NLayer.Core.Entities.Concert.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NLayer.Core.Entities.Concert.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.UserToken", b =>
                {
                    b.HasOne("NLayer.Core.Entities.Concert.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("NLayer.Core.Entities.Concert.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
